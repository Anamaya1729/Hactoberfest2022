# -*- coding: utf-8 -*-
"""AI CSP lab.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OHQRCAiuAvz9M3SKIMriIiXEmNNsrbdy
"""

pip install python-constraint

"""This notebook contains an introduction to constraint library of python for Constraint satisfaction problems using Artificial Intelligence."""

from constraint import *

p1 = Problem()
p1.addVariable('a', [1,2,3])
p1.addVariable('b',[4,5,6]) 
p1.addConstraint(lambda a,b: a+b >= b, ('a','b'))

p1.getSolutions()

p2 = Problem()
p2.addVariables(['a','b','c'],[1,2,3])
p2.addConstraint(MaxSumConstraint(3))
p2.getSolutions()

p2 = Problem()
p2.addVariables(['a','b','c'],[1,2,3])
p2.addConstraint(AllDifferentConstraint())
p2.getSolutions()

p2 = Problem()
p2.addVariables(['a','b','c'],[1,2,3])
p2.addConstraint(AllEqualConstraint())
p2.getSolutions()

p2 = Problem()
p2.addVariables(['a','b','c'],[1,2,3])
p2.addConstraint(MinSumConstraint(4))
p2.addConstraint(MaxSumConstraint(5))
p2.getSolutions()

p3 = Problem()
p3.addVariable('a',[1,2,3])
p3.addVariable('b',range(5))

def our_constraint(a,b):
  if a == b:
    return True

p3.addConstraint(our_constraint, ['a','b'])
sol = p3.getSolutions()
print(sol)
print(len(sol))

#CSP Cryptoarithmetic problem 
#  TWO 
#+ TWO 
#= FOUR
p4 = Problem()
p3.addVariables('TF', range(1,10))
p3.addVariables('WOUR', range(10))

def const(t,w,o,f,u,r):
  if 2*(t*100+w*10+o) == (f*1000+o*100+u*10+r):
    return True

p3.addConstraint(const, 'TWOFUR')
sol = p3.getSolutions()
print(len(sol))

#Map-coloring problem

p4 = Problem()
#A,B,C,D,E,F,G are the names of states and r,g,b are colors
p4.addVariables(['A','B','C','D','E','F','G'],['r','g','b'])
p4.addConstraint(AllDifferentConstraint(),['A','B'])
p4.addConstraint(AllDifferentConstraint(),['A','C'])
p4.addConstraint(AllDifferentConstraint(),['A','D'])
p4.addConstraint(AllDifferentConstraint(),['A','E'])
p4.addConstraint(AllDifferentConstraint(),['A','F'])
p4.addConstraint(AllDifferentConstraint(),['B','C'])
p4.addConstraint(AllDifferentConstraint(),['C','D'])
p4.addConstraint(AllDifferentConstraint(),['D','E'])
p4.addConstraint(AllDifferentConstraint(),['E','F'])
p4.getSolutions()

sol = p4.getSolutions()
print(len(sol))

# SEND X THE = MONEY
# N-Queen Problem

# sent the money
p5 = Problem()
p5.addVariables('ENDHOY', range(10))
p5.addVariables('STM',range(1,10))

def mul_constr(e,n,d,h,o,y,s,t,m):
  if [(s*1000+e*100+n*10+d)*(t*100+h*10+e) == (m*10000+o*1000+n*100+e*10+y)]:
    return True

p5.addConstraint(mul_constr, 'ENDHOYSTM')
sol = p5.getSolutions()
print(sol)
#print(len(sol))

